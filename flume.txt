1. Explain the core components of flume.
The core components of Flume are:
Event- The single log entry or unit of data that is transported.
Source- This is the component through which data enters Flume workflows.
Sink-It is responsible for transporting data to the desired destination.
Channel- It is the duct between the Sink and Source.
Agent- Any JVM that runs Flume.
Client- The component that transmits event to the source that operates with the agent.

2. Can flume provide 100% reliability while transfering the data.
At a high-level, Flume NG uses a single-hop message delivery guarantee end-to-end reliability for the system. 
To accomplish this, certain new concepts have been incorporated into its design, while certain other existing concepts have been either redefined, reused or dropped completely.
Flume NG uses channel-based transactions to guarantee reliable message delivery. 
When a message moves from one agent to another, two transactions are started, one on the agent that delivers the event and the other on the agent that receives the event. 
In order for the sending agent to commit it’s transaction, it must receive success indication from the receiving agent. The receiving agent only returns a success indication if it’s own transaction commits properly first. 
This guarantees 100% reliable delivery semantics between the hops that the flow makes.

3. Explain the consolidation in flume.
Consolidation collects data from different sources even it's different flume agents.
Flume source can collect all data flow from different sources and flows through channel and sink.
Finally send this data to HDFS or target destination.

4. Explain what is an event in flume.
A byte payload with optional string headers that represent the unit of data that Flume can transport from it’s point of origination to it’s final destination.

5. Explain what is an agent in flume.
An independent process that hosts flume components such as sources, channels and sinks, and thus has the ability to receive, store and forward events to their next-hop destination.